<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java源码 on Shao Yi`s Blog</title>
    <link>https://xueshaoyi.github.io/tags/java%E6%BA%90%E7%A0%81/</link>
    <description>Recent content in Java源码 on Shao Yi`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 04 Aug 2017 12:01:19 +0800</lastBuildDate>
    
	<atom:link href="https://xueshaoyi.github.io/tags/java%E6%BA%90%E7%A0%81/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HashMap源码(8)compute</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%818/</link>
      <pubDate>Fri, 04 Aug 2017 12:01:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%818/</guid>
      <description></description>
    </item>
    
    <item>
      <title>HashMap源码(7)computeIfPresent</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%817/</link>
      <pubDate>Fri, 04 Aug 2017 10:01:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%817/</guid>
      <description>这个方法和computeIfAbsent这个都是Java8的新的内容，都是可以在添加map的时候添加一个方法来对key进行操作存储value</description>
    </item>
    
    <item>
      <title>HashMap源码(6)computeIfAbsent</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%816/</link>
      <pubDate>Thu, 03 Aug 2017 18:01:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%816/</guid>
      <description>这个是Java8里面新增的功能 代码： public V computeIfAbsent(K key, Function&amp;lt;? super K, ? extends V&amp;gt; mappingFunction) { if (mappingFunction == null) throw new NullPointerException(); int hash = hash(key); Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; first; int n, i; int binCount = 0; TreeNode&amp;lt;K,V&amp;gt; t = null; Node&amp;lt;K,V&amp;gt; old = null; if (size &amp;gt; threshold || (tab = table) == null</description>
    </item>
    
    <item>
      <title>HashMap源码(5)put()方法</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%815/</link>
      <pubDate>Sun, 30 Jul 2017 18:01:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%815/</guid>
      <description>HashMap#put() /** * Associates the specified value with the specified key in this map. * If the map previously contained a mapping for the key, the old * value is replaced. * * @param key key with which the specified value is to be associated * @param value value to be associated with the specified key * @return the previous value associated with &amp;lt;tt&amp;gt;key&amp;lt;/tt&amp;gt;, or * &amp;lt;tt&amp;gt;null&amp;lt;/tt&amp;gt; if there was</description>
    </item>
    
    <item>
      <title>HashMap源码(3)静态工具方法hash()、tableSizeFor()</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%813/</link>
      <pubDate>Sun, 30 Jul 2017 16:31:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%813/</guid>
      <description>HashMap#hash() 为什么要有HashMap的hash()方法，难道不能直接使用KV中K原有的hash值吗？在HashMap的put、get操作时为什么不能直</description>
    </item>
    
    <item>
      <title>HashMap源码(4)resize()方法</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%814/</link>
      <pubDate>Sun, 30 Jul 2017 16:31:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%814/</guid>
      <description>HashMap#resize() 在HashMap源码(2)最后有相关源码： 源码的注释翻译为： 初始化或者翻倍表大小。如果表为null，则根据存放在threshold变量中的</description>
    </item>
    
    <item>
      <title>HashMap源码(2)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%812/</link>
      <pubDate>Sun, 30 Jul 2017 15:56:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%812/</guid>
      <description>HashMap初始化 初始化的几种情况： /** * Constructs an empty &amp;lt;tt&amp;gt;HashMap&amp;lt;/tt&amp;gt; with the specified initial * capacity and load factor. * * @param initialCapacity the initial capacity * @param loadFactor the load factor * @throws IllegalArgumentException if the initial capacity is negative * or the load factor is nonpositive */ public HashMap(int initialCapacity, float loadFactor) {</description>
    </item>
    
    <item>
      <title>HashMap源码(1)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%811/</link>
      <pubDate>Sun, 30 Jul 2017 13:56:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%811/</guid>
      <description>常量定义 1.默认容量 /** * The default initial capacity - MUST be a power of two. */ static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // aka 16 默认初始化的容量是16，必须是2的幂。 2.最大容量 /** * The maximum capacity, used if a higher value</description>
    </item>
    
    <item>
      <title>LinkedList源码(2)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/linkedlist%E6%BA%90%E7%A0%812/</link>
      <pubDate>Wed, 26 Jul 2017 12:50:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/linkedlist%E6%BA%90%E7%A0%812/</guid>
      <description>现在聊LinkedList的peek操作，这个操作都是进行输出参数，不会删除相关Node的。 /** * Retrieves, but does not remove, the first element of this list, * or returns {@code null} if this list is empty. *</description>
    </item>
    
    <item>
      <title>LinkedList源码(1)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/linkedlist%E6%BA%90%E7%A0%811/</link>
      <pubDate>Sat, 22 Jul 2017 13:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/linkedlist%E6%BA%90%E7%A0%811/</guid>
      <description>在使用List的 时候经常是ArrayList和LinkedList他们两个各有千秋，根据自己的业务使用情况来使用，现在咱们看看LinkedL</description>
    </item>
    
    <item>
      <title>ArrayList源码(2)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%812/</link>
      <pubDate>Tue, 18 Jul 2017 18:49:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%812/</guid>
      <description>现在接着说ArrayList的另外一个常用方法remove(). remove同样也是存在两个方法 １. public E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if</description>
    </item>
    
    <item>
      <title>ArrayList源码(1)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%811/</link>
      <pubDate>Tue, 18 Jul 2017 13:19:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%811/</guid>
      <description>ArrayList继承了AbstractList并实现了List接口。 三种初始化的方法： 第一种：规定List长度的参数 public ArrayList(int initialCapacity) { super(); if (initialCapacity &amp;lt; 0) throw new</description>
    </item>
    
    <item>
      <title>ArrayList源码(3)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%813/</link>
      <pubDate>Mon, 17 Jul 2017 11:54:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%813/</guid>
      <description>前两篇写了add和remove相关的源码，现在剩下的是零散的一些和Itr、SubList、ListItr几个相关的代码，这些应用次数也多但是</description>
    </item>
    
  </channel>
</rss>