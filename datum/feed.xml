<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data on Shao Yi`s Blog</title>
    <link>https://xueshaoyi.github.io/datum/</link>
    <description>Recent content in Data on Shao Yi`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 30 Jul 2017 20:36:19 +0800</lastBuildDate>
    
	<atom:link href="https://xueshaoyi.github.io/datum/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JVM调优</title>
      <link>https://xueshaoyi.github.io/datum/jvm%E8%B0%83%E4%BC%98/</link>
      <pubDate>Sun, 30 Jul 2017 20:36:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/jvm%E8%B0%83%E4%BC%98/</guid>
      <description>一、JVM内存模型及垃圾收集算法 1.根据Java虚拟机规范，JVM将内存划分为： New（年轻代） Tenured（年老代） 永久代（Perm） 其</description>
    </item>
    
    <item>
      <title>JAVA中值类型和引用类型</title>
      <link>https://xueshaoyi.github.io/datum/java%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 28 Jul 2017 13:55:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/java%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</guid>
      <description>区别： 引用类型表示你操作的数据是同一个，也就是说当你传一个参数给另一个方法时，你在另一个方法中改变这个变量的值，那么调用这个方法是传入的变量</description>
    </item>
    
    <item>
      <title>JAVA垃圾回收机制</title>
      <link>https://xueshaoyi.github.io/datum/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 28 Jul 2017 10:26:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>一．垃圾回收机制的作用和意义 Java语言中一个显著的特点就是引入了垃圾回收机制，使c++程序员最头疼的内存管理的问题迎刃而解，它使得Java</description>
    </item>
    
    <item>
      <title>JAVA集合类</title>
      <link>https://xueshaoyi.github.io/datum/java%E9%9B%86%E5%90%88%E7%B1%BB/</link>
      <pubDate>Fri, 28 Jul 2017 10:19:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/java%E9%9B%86%E5%90%88%E7%B1%BB/</guid>
      <description>而对于集合类，主要需要掌握的就是它的内部结构，以及遍历集合的迭代模式。 接口：Collection Collection是最基本的集合接口，一个</description>
    </item>
    
    <item>
      <title>JAVA单例模式详解</title>
      <link>https://xueshaoyi.github.io/datum/java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 28 Jul 2017 10:15:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</guid>
      <description>单例模式是设计模式中最简单的，只有一个单例类，没有其他的层次结构与抽象。 该模式需要确保该类只能生成一个对象，通常是该类需要消耗太多的资源或者</description>
    </item>
    
    <item>
      <title>Hibernate配置详细解释</title>
      <link>https://xueshaoyi.github.io/datum/hibernate%E9%85%8D%E7%BD%AE%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A/</link>
      <pubDate>Mon, 24 Jul 2017 12:58:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/hibernate%E9%85%8D%E7%BD%AE%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A/</guid>
      <description>``` &amp;lt;?xml version=&amp;lsquo;1.0&amp;rsquo; encoding=&amp;lsquo;gb2312&amp;rsquo;?&amp;gt; &amp;lt;!DOCTYPE hibernate-configuration PUBLIC &amp;ldquo;-//Hibernate/Hibernate Configuration DTD 3.0//EN&amp;rdquo; &amp;ldquo;http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&amp;quot;&amp;gt; &amp;lt;!--声明Hibernate配置文件的开始--&amp;gt; &amp;lt;hibernate-configuration&amp;gt; com.mysql.jdbc.Driver &amp;lt;!--设置数据库的连接url:jdbc:m</description>
    </item>
    
    <item>
      <title>HTTP协议</title>
      <link>https://xueshaoyi.github.io/datum/http%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 24 Jul 2017 11:54:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/http%E5%8D%8F%E8%AE%AE/</guid>
      <description>什么是HTTP协议 HTTP是Hyper Text Transfer Protocol（超文本传输协议）的缩写。它的发展是万维网协会（World Wide Web Consortium</description>
    </item>
    
    <item>
      <title>Java动态加载类</title>
      <link>https://xueshaoyi.github.io/datum/java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%B1%BB/</link>
      <pubDate>Mon, 24 Jul 2017 11:54:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%B1%BB/</guid>
      <description>Class.forName(类的全称);不仅表示类的类类型也表示动态加载类 要区分编译和运行 编译时刻加载类是静态加载类，运行时刻加载类是动态加</description>
    </item>
    
    <item>
      <title>apache 目录权限设置方法</title>
      <link>https://xueshaoyi.github.io/datum/apache-%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 24 Jul 2017 11:54:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/apache-%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</guid>
      <description>apache 目录权限设置方法 可以使用和这对语句为主目录或虚拟目录设置权限，它们是一对容器语句，必须成对出现，它们之间封装的是具体的设置目录权限语句，这</description>
    </item>
    
    <item>
      <title>二叉树优化原理</title>
      <link>https://xueshaoyi.github.io/datum/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BC%98%E5%8C%96%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 24 Jul 2017 11:54:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BC%98%E5%8C%96%E5%8E%9F%E7%90%86/</guid>
      <description>二叉树 二叉树:每个节点的子树小于等于两个。 左子树都是比节点小的数，右子树是比节点大的数，根据操作次数判断经过的节点数。 因为内存空间有限，若数</description>
    </item>
    
  </channel>
</rss>