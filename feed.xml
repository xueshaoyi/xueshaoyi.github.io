<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shao Yi`s Blog</title>
    <link>https://xueshaoyi.github.io/</link>
    <description>Recent content on Shao Yi`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 07 Aug 2017 12:38:19 +0800</lastBuildDate>
    
	<atom:link href="https://xueshaoyi.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HashMap源码(10)forEach、replaceAll</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%8110/</link>
      <pubDate>Mon, 07 Aug 2017 12:38:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%8110/</guid>
      <description>jdk8新方法forEach更好的遍历map数组进行操作了。 现在先看看以前的遍历写法： 以前总结的： String key = null; String value = null; for(Map.Entry&amp;lt;String,String&amp;gt; entry:map.entrySet()){ key = entry.getKey(); value = entry.getValue(); System.out.println(&amp;quot;key;&amp;quot;+ key+&amp;quot;,value:&amp;quot;+value); } for(String key:</description>
    </item>
    
    <item>
      <title>HashMap源码(9)merge</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%819/</link>
      <pubDate>Sun, 06 Aug 2017 15:50:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%819/</guid>
      <description>hashmap里面的这个merge方法，融合的意思，将新的value和旧的value进行融合。 @Override public V merge(K key, V value, BiFunction&amp;lt;? super V, ? super V, ? extends V&amp;gt; remappingFunction) { if (value == null) throw</description>
    </item>
    
    <item>
      <title>HashMap源码(8)compute</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%818/</link>
      <pubDate>Sat, 05 Aug 2017 18:01:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%818/</guid>
      <description>这个和之前的两个方法相同。 @Override public V compute(K key, BiFunction&amp;lt;? super K, ? super V, ? extends V&amp;gt; remappingFunction) { if (remappingFunction == null) throw new NullPointerException(); int hash = hash(key); Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; first; int n, i; int binCount = 0; TreeNode&amp;lt;K,V&amp;gt; t = null; Node&amp;lt;K,V&amp;gt; old = null; if (size &amp;gt; threshold || (tab = table) == null ||</description>
    </item>
    
    <item>
      <title>HashMap源码(7)computeIfPresent</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%817/</link>
      <pubDate>Sat, 05 Aug 2017 13:01:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%817/</guid>
      <description>这个方法和computeIfAbsent这个都是Java8的新的内容，都是可以在添加map的时候添加一个方法来对key进行操作存储value</description>
    </item>
    
    <item>
      <title>学习吧，查阅吧</title>
      <link>https://xueshaoyi.github.io/study/</link>
      <pubDate>Fri, 04 Aug 2017 12:28:02 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/study/</guid>
      <description>开源、大数据的：简单之美 面试感悟&amp;mdash;-一名3年工作经验的程序员应该具备的技能：&amp;ldquo;一个博客&amp;rdquo; Java相关技术</description>
    </item>
    
    <item>
      <title>HashMap源码(6)computeIfAbsent</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%816/</link>
      <pubDate>Thu, 03 Aug 2017 18:01:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%816/</guid>
      <description>这个是Java8里面新增的功能 代码： public V computeIfAbsent(K key, Function&amp;lt;? super K, ? extends V&amp;gt; mappingFunction) { if (mappingFunction == null) throw new NullPointerException(); int hash = hash(key); Node&amp;lt;K,V&amp;gt;[] tab; Node&amp;lt;K,V&amp;gt; first; int n, i; int binCount = 0; TreeNode&amp;lt;K,V&amp;gt; t = null; Node&amp;lt;K,V&amp;gt; old = null; if (size &amp;gt; threshold || (tab = table) == null</description>
    </item>
    
    <item>
      <title>JVM调优</title>
      <link>https://xueshaoyi.github.io/datum/jvm%E8%B0%83%E4%BC%98/</link>
      <pubDate>Sun, 30 Jul 2017 20:36:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/jvm%E8%B0%83%E4%BC%98/</guid>
      <description>一、JVM内存模型及垃圾收集算法 1.根据Java虚拟机规范，JVM将内存划分为： New（年轻代） Tenured（年老代） 永久代（Perm） 其</description>
    </item>
    
    <item>
      <title>HashMap源码(5)put()方法</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%815/</link>
      <pubDate>Sun, 30 Jul 2017 18:01:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%815/</guid>
      <description>HashMap#put() /** * Associates the specified value with the specified key in this map. * If the map previously contained a mapping for the key, the old * value is replaced. * * @param key key with which the specified value is to be associated * @param value value to be associated with the specified key * @return the previous value associated with &amp;lt;tt&amp;gt;key&amp;lt;/tt&amp;gt;, or * &amp;lt;tt&amp;gt;null&amp;lt;/tt&amp;gt; if there was</description>
    </item>
    
    <item>
      <title>HashMap源码(3)静态工具方法hash()、tableSizeFor()</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%813/</link>
      <pubDate>Sun, 30 Jul 2017 16:31:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%813/</guid>
      <description>HashMap#hash() 为什么要有HashMap的hash()方法，难道不能直接使用KV中K原有的hash值吗？在HashMap的put、get操作时为什么不能直</description>
    </item>
    
    <item>
      <title>HashMap源码(4)resize()方法</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%814/</link>
      <pubDate>Sun, 30 Jul 2017 16:31:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%814/</guid>
      <description>HashMap#resize() 在HashMap源码(2)最后有相关源码： 源码的注释翻译为： 初始化或者翻倍表大小。如果表为null，则根据存放在threshold变量中的</description>
    </item>
    
    <item>
      <title>HashMap源码(2)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%812/</link>
      <pubDate>Sun, 30 Jul 2017 15:56:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%812/</guid>
      <description>HashMap初始化 初始化的几种情况： /** * Constructs an empty &amp;lt;tt&amp;gt;HashMap&amp;lt;/tt&amp;gt; with the specified initial * capacity and load factor. * * @param initialCapacity the initial capacity * @param loadFactor the load factor * @throws IllegalArgumentException if the initial capacity is negative * or the load factor is nonpositive */ public HashMap(int initialCapacity, float loadFactor) {</description>
    </item>
    
    <item>
      <title>HashMap源码(1)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%811/</link>
      <pubDate>Sun, 30 Jul 2017 13:56:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/hashmap%E6%BA%90%E7%A0%811/</guid>
      <description>常量定义 1.默认容量 /** * The default initial capacity - MUST be a power of two. */ static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // aka 16 默认初始化的容量是16，必须是2的幂。 2.最大容量 /** * The maximum capacity, used if a higher value</description>
    </item>
    
    <item>
      <title>JAVA中值类型和引用类型</title>
      <link>https://xueshaoyi.github.io/datum/java%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 28 Jul 2017 13:55:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/java%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</guid>
      <description>区别： 引用类型表示你操作的数据是同一个，也就是说当你传一个参数给另一个方法时，你在另一个方法中改变这个变量的值，那么调用这个方法是传入的变量</description>
    </item>
    
    <item>
      <title>JAVA垃圾回收机制</title>
      <link>https://xueshaoyi.github.io/datum/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 28 Jul 2017 10:26:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>一．垃圾回收机制的作用和意义 Java语言中一个显著的特点就是引入了垃圾回收机制，使c++程序员最头疼的内存管理的问题迎刃而解，它使得Java</description>
    </item>
    
    <item>
      <title>JAVA集合类</title>
      <link>https://xueshaoyi.github.io/datum/java%E9%9B%86%E5%90%88%E7%B1%BB/</link>
      <pubDate>Fri, 28 Jul 2017 10:19:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/java%E9%9B%86%E5%90%88%E7%B1%BB/</guid>
      <description>而对于集合类，主要需要掌握的就是它的内部结构，以及遍历集合的迭代模式。 接口：Collection Collection是最基本的集合接口，一个</description>
    </item>
    
    <item>
      <title>JAVA单例模式详解</title>
      <link>https://xueshaoyi.github.io/datum/java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 28 Jul 2017 10:15:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</guid>
      <description>单例模式是设计模式中最简单的，只有一个单例类，没有其他的层次结构与抽象。 该模式需要确保该类只能生成一个对象，通常是该类需要消耗太多的资源或者</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>https://xueshaoyi.github.io/post/2017/notes/sql/</link>
      <pubDate>Thu, 27 Jul 2017 16:38:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/notes/sql/</guid>
      <description>清空表数据：truncate Table tablename 查重 查找表中多余的重复记录，重复记录时根据单个字段来判断： SELECT * FROM RADA_CHN_DOR_L2_QC_F_TAB WHERE V_FILE_NAME IN (SELECT V_FILE_NAME FROM RADA_CHN_DOR_L2_QC_F_TAB GROUP BY V_FILE_NAME HAVING COUNT(V_FILE_NAME)&amp;gt;1) 删除表中多余的重复</description>
    </item>
    
    <item>
      <title>Linux统计文件个数操作</title>
      <link>https://xueshaoyi.github.io/post/2017/notes/linux%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E4%B8%AA%E6%95%B0%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 26 Jul 2017 17:10:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/notes/linux%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E4%B8%AA%E6%95%B0%E6%93%8D%E4%BD%9C/</guid>
      <description>统计某文件夹下文件个数 ls -l |grep &amp;ldquo;^-&amp;rdquo;|wc -l 统计某文件夹下目录的个数 ls -l |grep &amp;ldquo;^-d&amp;rdquo;|wc -l 统计文件夹下文件的个数，包括子文件夹下的 ls -lR|grep &amp;ldquo;^-&amp;rdquo;|wc -l ls -lR 长列表输出该目录下文件</description>
    </item>
    
    <item>
      <title>LinkedList源码(2)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/linkedlist%E6%BA%90%E7%A0%812/</link>
      <pubDate>Wed, 26 Jul 2017 12:50:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/linkedlist%E6%BA%90%E7%A0%812/</guid>
      <description>现在聊LinkedList的peek操作，这个操作都是进行输出参数，不会删除相关Node的。 /** * Retrieves, but does not remove, the first element of this list, * or returns {@code null} if this list is empty. *</description>
    </item>
    
    <item>
      <title>Hibernate配置详细解释</title>
      <link>https://xueshaoyi.github.io/datum/hibernate%E9%85%8D%E7%BD%AE%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A/</link>
      <pubDate>Mon, 24 Jul 2017 12:58:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/hibernate%E9%85%8D%E7%BD%AE%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A/</guid>
      <description>``` &amp;lt;?xml version=&amp;lsquo;1.0&amp;rsquo; encoding=&amp;lsquo;gb2312&amp;rsquo;?&amp;gt; &amp;lt;!DOCTYPE hibernate-configuration PUBLIC &amp;ldquo;-//Hibernate/Hibernate Configuration DTD 3.0//EN&amp;rdquo; &amp;ldquo;http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&amp;quot;&amp;gt; &amp;lt;!--声明Hibernate配置文件的开始--&amp;gt; &amp;lt;hibernate-configuration&amp;gt; com.mysql.jdbc.Driver &amp;lt;!--设置数据库的连接url:jdbc:m</description>
    </item>
    
    <item>
      <title>HTTP协议</title>
      <link>https://xueshaoyi.github.io/datum/http%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 24 Jul 2017 11:54:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/http%E5%8D%8F%E8%AE%AE/</guid>
      <description>什么是HTTP协议 HTTP是Hyper Text Transfer Protocol（超文本传输协议）的缩写。它的发展是万维网协会（World Wide Web Consortium</description>
    </item>
    
    <item>
      <title>Java动态加载类</title>
      <link>https://xueshaoyi.github.io/datum/java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%B1%BB/</link>
      <pubDate>Mon, 24 Jul 2017 11:54:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%B1%BB/</guid>
      <description>Class.forName(类的全称);不仅表示类的类类型也表示动态加载类 要区分编译和运行 编译时刻加载类是静态加载类，运行时刻加载类是动态加</description>
    </item>
    
    <item>
      <title>apache 目录权限设置方法</title>
      <link>https://xueshaoyi.github.io/datum/apache-%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 24 Jul 2017 11:54:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/apache-%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/</guid>
      <description>apache 目录权限设置方法 可以使用和这对语句为主目录或虚拟目录设置权限，它们是一对容器语句，必须成对出现，它们之间封装的是具体的设置目录权限语句，这</description>
    </item>
    
    <item>
      <title>二叉树优化原理</title>
      <link>https://xueshaoyi.github.io/datum/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BC%98%E5%8C%96%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 24 Jul 2017 11:54:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/datum/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BC%98%E5%8C%96%E5%8E%9F%E7%90%86/</guid>
      <description>二叉树 二叉树:每个节点的子树小于等于两个。 左子树都是比节点小的数，右子树是比节点大的数，根据操作次数判断经过的节点数。 因为内存空间有限，若数</description>
    </item>
    
    <item>
      <title>LinkedList源码(1)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/linkedlist%E6%BA%90%E7%A0%811/</link>
      <pubDate>Sat, 22 Jul 2017 13:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/linkedlist%E6%BA%90%E7%A0%811/</guid>
      <description>在使用List的 时候经常是ArrayList和LinkedList他们两个各有千秋，根据自己的业务使用情况来使用，现在咱们看看LinkedL</description>
    </item>
    
    <item>
      <title>ArrayList源码(2)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%812/</link>
      <pubDate>Tue, 18 Jul 2017 18:49:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%812/</guid>
      <description>现在接着说ArrayList的另外一个常用方法remove(). remove同样也是存在两个方法 １. public E remove(int index) { rangeCheck(index); modCount++; E oldValue = elementData(index); int numMoved = size - index - 1; if</description>
    </item>
    
    <item>
      <title>java volatile</title>
      <link>https://xueshaoyi.github.io/post/2017/zhishi/java-volatile/</link>
      <pubDate>Tue, 18 Jul 2017 14:39:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/zhishi/java-volatile/</guid>
      <description>volatile是共享变量“可见性”关键字，当该变量在一处更改后，在其他线程里读到的是这个修改后的值。它是轻量级的synchronized，</description>
    </item>
    
    <item>
      <title>ArrayList源码(1)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%811/</link>
      <pubDate>Tue, 18 Jul 2017 13:19:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%811/</guid>
      <description>ArrayList继承了AbstractList并实现了List接口。 三种初始化的方法： 第一种：规定List长度的参数 public ArrayList(int initialCapacity) { super(); if (initialCapacity &amp;lt; 0) throw new</description>
    </item>
    
    <item>
      <title>java的final关键字</title>
      <link>https://xueshaoyi.github.io/post/2017/zhishi/java%E7%9A%84final%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Mon, 17 Jul 2017 13:13:55 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/zhishi/java%E7%9A%84final%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>Java中的final关键字非常重要，它可以应用于类、方法以及变量。将变量，方法和类声明为final代表了什么？使用final的好处是什么？</description>
    </item>
    
    <item>
      <title>java transient关键字</title>
      <link>https://xueshaoyi.github.io/post/2017/zhishi/java-transient%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Mon, 17 Jul 2017 13:10:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/zhishi/java-transient%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>transient的作用和使用方法 我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为</description>
    </item>
    
    <item>
      <title>ArrayList源码(3)</title>
      <link>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%813/</link>
      <pubDate>Mon, 17 Jul 2017 11:54:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/base/arraylist%E6%BA%90%E7%A0%813/</guid>
      <description>前两篇写了add和remove相关的源码，现在剩下的是零散的一些和Itr、SubList、ListItr几个相关的代码，这些应用次数也多但是</description>
    </item>
    
    <item>
      <title>static特殊用法--Java包静态导入</title>
      <link>https://xueshaoyi.github.io/post/2017/zhishi/static%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95--java%E5%8C%85%E9%9D%99%E6%80%81%E5%AF%BC%E5%85%A5/</link>
      <pubDate>Wed, 12 Jul 2017 14:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/zhishi/static%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95--java%E5%8C%85%E9%9D%99%E6%80%81%E5%AF%BC%E5%85%A5/</guid>
      <description>静态导包就是Java包的静态导入，用import static代替import静态导入包是JDK1.5中的新特性。 一般我们导入一个类都用 import co</description>
    </item>
    
    <item>
      <title>static{}静态块</title>
      <link>https://xueshaoyi.github.io/post/2017/zhishi/static%E9%9D%99%E6%80%81%E5%9D%97/</link>
      <pubDate>Mon, 10 Jul 2017 13:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/zhishi/static%E9%9D%99%E6%80%81%E5%9D%97/</guid>
      <description>static{}静态块会在类被加载的时候执行一次，一般用来初始化静态变量和调用静态方法。 1、static{}语句块执行的时机，类被加载的准确</description>
    </item>
    
    <item>
      <title>static用法详解</title>
      <link>https://xueshaoyi.github.io/post/2017/zhishi/static%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 10 Jul 2017 13:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/zhishi/static%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>如果一个类成员被声明为static，它就能够在类的任何对象创建之前被访问，而不必引用任何对象。static 成员的最常见的例子是main( ) 。</description>
    </item>
    
    <item>
      <title>GitHub git clone错误</title>
      <link>https://xueshaoyi.github.io/post/2017/notes/github-git-clone%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sat, 01 Jul 2017 13:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/notes/github-git-clone%E9%94%99%E8%AF%AF/</guid>
      <description>问题描述： 是Git管理代码，从git服务器上获取Contacts模块的代码： git clone your-git-server 提示：warning: remote HEAD refers to nonexistent ref, unable to checkout. 并且Contact</description>
    </item>
    
    <item>
      <title>zookeeper通信模式</title>
      <link>https://xueshaoyi.github.io/post/2017/bigdata/zookeeper%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 27 Jun 2017 13:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/bigdata/zookeeper%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>Zookeeper的通信架构 在Zookeeper整个系统中，有3中角色的服务，client、Follower、leader。其中client</description>
    </item>
    
    <item>
      <title>HashMap、HashTable和ConcurrentHashMap的区别</title>
      <link>https://xueshaoyi.github.io/post/2017/zhishi/hashmaphashtable%E5%92%8Cconcurrenthashmap%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 20 Jun 2017 13:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/zhishi/hashmaphashtable%E5%92%8Cconcurrenthashmap%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>HashMap和HashTable的区别 HashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主</description>
    </item>
    
    <item>
      <title>MySQL主从复制读写分离</title>
      <link>https://xueshaoyi.github.io/post/2017/zhishi/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</link>
      <pubDate>Sat, 20 May 2017 13:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/zhishi/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</guid>
      <description>原理 mysql主(称master)从(称slave)复制的原理： 1、 master将数据改变记录到二进制日志(binary log)中,也即是配</description>
    </item>
    
    <item>
      <title>Redis的哨兵模式（Sentinel）</title>
      <link>https://xueshaoyi.github.io/post/2017/bigdata/redis%E7%9A%84%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 17 May 2017 13:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/bigdata/redis%E7%9A%84%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</guid>
      <description>Redis Sentinel是一个分布式系统，你可以在一个架构中运行多个 Sentinel 进程（progress）， 这些进程使用流言协议（gossip protocol</description>
    </item>
    
    <item>
      <title>HashMap的实现原理</title>
      <link>https://xueshaoyi.github.io/post/2017/zhishi/hashmap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 15 May 2017 13:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/zhishi/hashmap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类</description>
    </item>
    
    <item>
      <title>Zookeeper</title>
      <link>https://xueshaoyi.github.io/post/2017/bigdata/zookeeper/</link>
      <pubDate>Thu, 11 May 2017 13:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/bigdata/zookeeper/</guid>
      <description>Zookeeper概述 Zookeeper是一个工具，可以实现集群中的分布式协调服务。 所谓的分布式协调服务，就是在集群的节点中进行可靠的消息传</description>
    </item>
    
    <item>
      <title>HBase简单配置学习</title>
      <link>https://xueshaoyi.github.io/post/2017/bigdata/hbase%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 14 Apr 2017 12:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/bigdata/hbase%E9%85%8D%E7%BD%AE/</guid>
      <description>一、HBASE概述 HBase是一个分布式的、面向列的开源数据库。HBase不同于一般关系数据库，它是一个适合于非结构化数据存储的数据库。另一</description>
    </item>
    
    <item>
      <title>Hadoop 特点 和缺点</title>
      <link>https://xueshaoyi.github.io/post/2017/bigdata/hadooptq/</link>
      <pubDate>Thu, 23 Mar 2017 12:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/bigdata/hadooptq/</guid>
      <description>一、 Hadoop 特点 1、支持超大文件 一般来说，HDFS存储的文件可以支持TB和PB级别的数据。 2、检测和快速应对硬件故障 在集群环境中，硬件故障是常见性</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://xueshaoyi.github.io/about/</link>
      <pubDate>Mon, 20 Mar 2017 23:28:02 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/about/</guid>
      <description>大家好，我叫薛少毅，是一名小小的程序猿。 我的经历 2013-2017 河北大学计算机科学与技术学院 2014-2016 河北大学中晋联合实验室 2016-至今 北京神州泰岳软件股份有限</description>
    </item>
    
    <item>
      <title>hadoop基本介绍及简单安装配置</title>
      <link>https://xueshaoyi.github.io/post/2017/bigdata/hadoopbase/</link>
      <pubDate>Mon, 20 Mar 2017 12:13:19 +0800</pubDate>
      
      <guid>https://xueshaoyi.github.io/post/2017/bigdata/hadoopbase/</guid>
      <description>1、hadoop简单介绍 Hadoop实现了一个分布式文件系统（Hadoop Distributed File System），简称HDFS。HDFS有高容错性的特点，并且设</description>
    </item>
    
  </channel>
</rss>